# nginx/nginx-deployment.yaml
# Kubernetes Deployment configuration for Nginx

# API version and resource type definition
apiVersion: apps/v1          # Using the apps/v1 API version for Deployment resources
kind: Deployment             # This defines the resource type as a Deployment

# Metadata section - identifies the deployment
metadata:
  name: nginx-deployment     # Name of the deployment resource
  namespace: nginx-demo      # Kubernetes namespace where this deployment will be created
  labels:                    # Labels for identifying the deployment
    app: nginx               # Label with key 'app' and value 'nginx'

# Specification section - defines the desired state of the deployment
spec:
  replicas: 2                # Number of pod replicas to maintain (3 identical nginx pods)
  
  # Selector - tells the deployment how to find which pods to manage
  selector:
    matchLabels:             # Pods with these labels will be managed by this deployment
      app: nginx             # Must match the labels in the pod template below
  
  # Update strategy - defines how pods are replaced during updates
  strategy:
    type: RollingUpdate      # Gradually replace old pods with new ones (zero downtime)
    rollingUpdate:
      maxSurge: 1            # Maximum number of extra pods allowed during update (1 extra pod)
      maxUnavailable: 0      # Maximum number of unavailable pods during update (0 = full availability)
  
  # Pod template - defines the specification for the pods that will be created
  template:
    metadata:
      labels:                # Labels that will be applied to each pod
        app: nginx           # Same label as in the selector above
    
    # Pod specification - defines the containers and runtime properties
    spec:
      containers:
      - name: nginx          # Name of the container within the pod
        image: sarowaralam/sarowar-nginx-03  # Docker image to use for the container
        
        # Container ports - defines which ports the container exposes
        ports:
        - containerPort: 80  # Nginx listens on port 80
        
        # Resource requirements and limits - controls CPU and memory allocation
        resources:
          requests:          # Minimum resources guaranteed to the container
            cpu: 100m        # 0.1 CPU cores (100 millicores)
            memory: 128Mi    # 128 Mebibytes of memory
          limits:            # Maximum resources the container can use
            cpu: 200m        # 0.2 CPU cores maximum
            memory: 256Mi    # 256 Mebibytes of memory maximum
        
        # Liveness probe - checks if the container is running properly
        livenessProbe:
          httpGet:           # Uses HTTP GET request to check health
            path: /          # HTTP path to check (root path)
            port: 80         # Port to check on
          initialDelaySeconds: 5   # Wait 5 seconds before first check
          periodSeconds: 10        # Check every 10 seconds
          timeoutSeconds: 5        # Timeout after 5 seconds if no response
          failureThreshold: 3      # Mark as failed after 3 consecutive failures
        
        # Readiness probe - checks if the container is ready to serve traffic
        readinessProbe:
          httpGet:           # Uses HTTP GET request to check readiness
            path: /          # HTTP path to check (root path)
            port: 80         # Port to check on
          initialDelaySeconds: 5   # Wait 5 seconds before first check
          periodSeconds: 10        # Check every 10 seconds
          timeoutSeconds: 5        # Timeout after 5 seconds if no response
          failureThreshold: 3      # Mark as unready after 3 consecutive failures
        
        imagePullPolicy: IfNotPresent  # Pull image only if not already present locally
      
      restartPolicy: Always  # Always restart the container if it fails


# Deployment Basics:
# Deployment: Manages a set of identical pods (replicas)
# Replicas: Ensures 3 identical nginx pods are always running
# Labels: Used to identify and select pods
# Update Strategy:
# RollingUpdate: Updates pods gradually without downtime
# maxSurge: Allows 1 extra pod during updates for smooth transition
# maxUnavailable: Ensures no pods are unavailable during updates
# Health Checks:
# Liveness Probe: Determines if pod needs to be restarted
# Readiness Probe: Determines if pod can receive traffic
# Both use HTTP checks on port 80 to verify nginx is responding
# Resource Management:
# Requests: Minimum resources reserved for the container
# Limits: Maximum resources the container can use
# Prevents any single pod from consuming too many resources      
