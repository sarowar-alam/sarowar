events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # API endpoints that return JSON
        location /start-load {
            default_type application/json;
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin "*";
            
            return 200 '{"status":"starting","message":"CPU load starting - use /real-start-load for actual load"}';
        }

        location /stop-load {
            default_type application/json;
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin "*";
            return 200 '{"status":"stopped","message":"CPU load stopped"}';
        }

        location /cpu-info {
            default_type application/json;
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin "*";
            return 200 '{"cores":"2","arch":"x86_64","load":"0.00","message":"Static CPU info"}';
        }

        # REAL CPU load endpoints - these execute scripts
        location /real-start-load {
            default_type application/json;
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin "*";
            
            # Use Lua to execute the script
            content_by_lua_block {
                local handle = io.popen("/usr/share/nginx/html/scripts/start-load.sh")
                local result = handle:read("*a")
                handle:close()
                ngx.say(result)
            }
        }

        location /real-stop-load {
            default_type application/json;
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin "*";
            
            content_by_lua_block {
                local handle = io.popen("/usr/share/nginx/html/scripts/stop-load.sh")
                local result = handle:read("*a")
                handle:close()
                ngx.say(result)
            }
        }

        location /real-cpu-info {
            default_type application/json;
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin "*";
            
            content_by_lua_block {
                local handle = io.popen("/usr/share/nginx/html/scripts/cpu-info.sh")
                local result = handle:read("*a")
                handle:close()
                ngx.say(result)
            }
        }

        # Health check endpoint
        location /health {
            default_type text/plain;
            return 200 "healthy\n";
        }

        # Serve static files
        location / {
            try_files $uri $uri/ =404;
        }
    }
}