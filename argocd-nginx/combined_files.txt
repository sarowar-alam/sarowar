argo-applications\nginx-app.yaml
# argocd-nginx/argo-applications/nginx-app-auto.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: nginx-demo
  namespace: argocd
  annotations:
    # This ensures immediate refresh when changes are detected
    argocd.argoproj.io/refresh-type: hard
spec:
  project: default
  source:
    repoURL: https://github.com/sarowar-alam/sarowar.git
    targetRevision: main
    path: argocd-nginx/nginx
  destination:
    server: https://kubernetes.default.svc
    namespace: nginx-demo
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    # Add retry logic for better reliability
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
    syncOptions:
    - CreateNamespace=true
    - ApplyOutOfSyncOnly=true


nginx\nginx-deployment.yaml
# nginx\nginx-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: nginx-demo
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: sarowaralam/sarowar-nginx
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10


nginx\nginx-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: nginx-demo


nginx\nginx-service.yaml
# nginx\nginx-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: nginx-demo
spec:
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP


aws-cluster.yaml
# API version for eksctl configuration file format
apiVersion: eksctl.io/v1alpha5
# Type of resource being defined - ClusterConfig for EKS cluster
kind: ClusterConfig

# Cluster metadata and identification
metadata:
  # Name of the EKS cluster
  name: argo-cd-class-12th
  # AWS region where cluster will be deployed
  region: ap-south-1
  # Kubernetes version for the cluster
  version: "1.33"
  # Tags for resource identification and cost tracking
  tags:
    # Project identifier tag
    Project: argo-cd-ostad
    # Environment classification tag
    Environment: Test
    # Class date identifier tag
    ClassDate: 12thOctober2025

# IAM (Identity and Access Management) configuration
iam:
  # Enable OIDC (OpenID Connect) for IAM roles for service accounts
  withOIDC: true

# Kubernetes addons to install with the cluster
addons:
- name: vpc-cni  # AWS VPC CNI plugin for pod networking
- name: aws-ebs-csi-driver  # CSI driver for EBS volume provisioning

# Managed node groups configuration (AWS manages the node lifecycle)
managedNodeGroups:
- name: argo-workers  # Name of the node group
  instanceType: m7i.xlarge  # EC2 instance type for worker nodes
  desiredCapacity: 1  # Number of nodes to maintain
  minSize: 1  # Minimum number of nodes in auto-scaling group
  maxSize: 2  # Maximum number of nodes in auto-scaling group
  amiFamily: AmazonLinux2023  # Operating system family for nodes
  iam:
    withAddonPolicies:
      ebs: true  # Attach EBS-specific IAM policies to node IAM role
  volumeSize: 40  # Root volume size in GB
  volumeType: gp3  # EBS volume type (General Purpose SSD)
  ebsOptimized: true  # Enable EBS optimization for better disk performance


# Command to create the cluster using this configuration file
#  eksctl create cluster -f aws-cluster.yaml --profile ostad

# =====================================================
# COMMAND LINE INSTRUCTIONS (commented out as they're not part of the YAML)
# =====================================================

# Associate OIDC provider with the cluster for IAM roles for service accounts
#eksctl utils associate-iam-oidc-provider --region ap-south-1 --cluster argo-cd-class-12th --approve --profile ostad

# Update the VPC-CNI addon to latest version
#eksctl update addon --name vpc-cni --cluster argo-cd-class-12th --region ap-south-1 --profile ostad

# Set AWS profile environment variable (PowerShell syntax)
#$env:AWS_PROFILE="ostad"

# Migrate from legacy iamserviceaccount to newer pod identity approach
#eksctl utils migrate-to-pod-identity --cluster argo-cd-class-12th --region ap-south-1 --approve


