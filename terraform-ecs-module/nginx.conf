events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        # Health check endpoint
        location /health.html {
            access_log off;
            try_files /health.html =404;
        }

        # API endpoints that return JSON (simulated)
        location /start-load {
            default_type application/json;
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type";
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            
            return 200 '{"status":"starting","message":"CPU load starting - use /real-start-load for actual load"}';
        }

        location /stop-load {
            default_type application/json;
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type";
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            
            return 200 '{"status":"stopped","message":"CPU load stopped"}';
        }

        location /cpu-info {
            default_type application/json;
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type";
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            
            return 200 '{"cores":"2","arch":"x86_64","load":"0.00","message":"Static CPU info"}';
        }

        # REAL CPU load endpoints - execute scripts directly
        location /real-start-load {
            default_type application/json;
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type";
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            
            # Execute the script and return its output
            add_header X-Accel-Buffering no;
            content_by_lua_block {
                local handle = io.popen("/usr/share/nginx/html/scripts/start-load.sh 2>&1")
                local result = handle:read("*a")
                handle:close()
                ngx.say(result)
            }
        }

        location /real-stop-load {
            default_type application/json;
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type";
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            
            # Execute the script and return its output
            add_header X-Accel-Buffering no;
            content_by_lua_block {
                local handle = io.popen("/usr/share/nginx/html/scripts/stop-load.sh 2>&1")
                local result = handle:read("*a")
                handle:close()
                ngx.say(result)
            }
        }

        location /real-cpu-info {
            default_type application/json;
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type";
            
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            
            # Execute the script and return its output
            add_header X-Accel-Buffering no;
            content_by_lua_block {
                local handle = io.popen("/usr/share/nginx/html/scripts/cpu-info.sh 2>&1")
                local result = handle:read("*a")
                handle:close()
                ngx.say(result)
            }
        }

        # Health check endpoint for ALB
        location /health {
            access_log off;
            default_type text/plain;
            return 200 "healthy\n";
        }

        # Simple status endpoint
        location /status {
            default_type application/json;
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin "*";
            
            return 200 '{"status":"running","timestamp":"2025-10-24T13:30:00Z","service":"cpu-load-test"}';
        }

        # Serve static files
        location / {
            try_files $uri $uri/ =404;
        }

        # Better error pages
        error_page 404 /404.html;
        location = /404.html {
            internal;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            internal;
        }
    }
}