---
- name: 🚀 Setup AWS Infrastructure (Static Configuration)
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - "../group_vars/all.yml"

  tasks:
    - name: Check if key file already exists locally
      stat:
        path: "{{ key_file_path }}"
      register: key_file_stat

    - name: Check if key pair exists in AWS
      amazon.aws.ec2_key_info:
        region: "{{ aws_region }}"
      register: key_info
      ignore_errors: yes

    - name: Create EC2 key pair if it doesn't exist
      amazon.aws.ec2_key:
        name: "{{ key_name }}"
        region: "{{ aws_region }}"
        state: present
      register: key_result
      when: not key_file_stat.stat.exists

    - name: Save private key locally
      copy:
        content: "{{ key_result.key.private_key }}"
        dest: "{{ key_file_path }}"
        mode: '0600'
      when: key_result is defined and key_result.changed
      notify: Display key info

    - name: Use existing key info
      debug:
        msg: "Using existing key pair: {{ key_name }}"
      when: key_file_stat.stat.exists

    - name: Check if VPC already exists
      amazon.aws.ec2_vpc_net_info:
        region: "{{ aws_region }}"
        filters:
          "tag:Name": "{{ project_name }}-vpc"
      register: vpc_info

    - name: Create VPC if it doesn't exist
      amazon.aws.ec2_vpc_net:
        region: "{{ aws_region }}"
        name: "{{ project_name }}-vpc"
        cidr_block: "{{ vpc_cidr }}"
        tags:
          Project: "{{ project_name }}"
          Environment: production
      register: vpc
      when: vpc_info.vpcs | length == 0

    - name: Use existing VPC
      set_fact:
        vpc: "{{ vpc_info }}"
      when: vpc_info.vpcs | length > 0

    - name: Create Internet Gateway if needed
      amazon.aws.ec2_vpc_igw:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc.vpcs[0].id if vpc_info.vpcs | length > 0 else vpc.vpc.id }}"
        tags:
          Project: "{{ project_name }}"
      register: igw
      when: vpc_info.vpcs | length == 0 or (vpc_info.vpcs[0].internet_gateway_id is not defined)

    - name: Create public subnet if needed
      amazon.aws.ec2_vpc_subnet:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc.vpcs[0].id if vpc_info.vpcs | length > 0 else vpc.vpc.id }}"
        cidr: "{{ public_subnet_cidr }}"
        az: "{{ aws_region }}a"
        tags:
          Name: "{{ project_name }}-public-subnet"
          Project: "{{ project_name }}"
      register: public_subnet
      when: vpc_info.vpcs | length == 0

    - name: Create route table for public subnet
      amazon.aws.ec2_vpc_route_table:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc.vpcs[0].id if vpc_info.vpcs | length > 0 else vpc.vpc.id }}"
        tags:
          Name: "{{ project_name }}-public-rt"
          Project: "{{ project_name }}"
        subnets:
          - "{{ public_subnet.subnet.id if public_subnet is defined else vpc.vpcs[0].subnets[0] }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id if igw is defined else vpc.vpcs[0].internet_gateway_id }}"
      register: public_route_table
      when: vpc_info.vpcs | length == 0

    - name: Create security group for web servers
      amazon.aws.ec2_security_group:
        name: "{{ project_name }}-web-sg"
        description: "Security group for web servers"
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc.vpcs[0].id if vpc_info.vpcs | length > 0 else vpc.vpc.id }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
            rule_desc: "SSH access"
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
            rule_desc: "HTTP access"
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
            rule_desc: "HTTPS access"
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
        tags:
          Project: "{{ project_name }}"
      register: web_sg

    - name: Check if web server already exists
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        filters:
          "tag:Name": "{{ project_name }}-web-01"
          instance-state-name: running
      register: existing_instance

    - name: Launch web server instance if it doesn't exist
      amazon.aws.ec2_instance:
        name: "{{ project_name }}-web-01"
        region: "{{ aws_region }}"
        key_name: "{{ key_name }}"
        image_id: "{{ ubuntu_ami }}"
        instance_type: t3.micro
        vpc_subnet_id: "{{ public_subnet.subnet.id if public_subnet is defined else vpc.vpcs[0].subnets[0] }}"
        security_group: "{{ web_sg.group_id }}"
        network:
          assign_public_ip: true
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: 20
              delete_on_termination: true
        tags:
          Name: "{{ project_name }}-web-01"
          Role: web
          Environment: production
          Project: "{{ project_name }}"
        wait: true
      register: web_instance
      when: existing_instance.instances | length == 0

    - name: Use existing instance
      set_fact:
        web_instance: "{{ existing_instance }}"
      when: existing_instance.instances | length > 0

    - name: Get instance public IP
      set_fact:
        instance_public_ip: "{{ web_instance.instances[0].public_ip_address if web_instance.instances is defined else existing_instance.instances[0].public_ip_address }}"

    - name: Wait for SSH to be ready on web server
      wait_for:
        host: "{{ instance_public_ip }}"
        port: 22
        delay: 10
        timeout: 300
      connection: local
      when: instance_public_ip is defined

    - name: Get current timestamp
      shell: date -Iseconds
      register: current_timestamp
      changed_when: false

    - name: Save instance information to file
      copy:
        content: |
          # AWS Infrastructure Details
          Project: {{ project_name }}
          Created: {{ current_timestamp.stdout }}
          Region: {{ aws_region }}
          AMI: {{ ubuntu_ami }}

          # Key Pair
          Key Name: {{ key_name }}
          Key File: {{ key_file_path }}

          # VPC
          VPC ID: {{ vpc.vpcs[0].id if vpc_info.vpcs | length > 0 else vpc.vpc.id }}
          VPC CIDR: {{ vpc_cidr }}

          # Instances
          Web Server:
            Name: {{ project_name }}-web-01
            Public IP: {{ instance_public_ip }}
            SSH: ssh -i {{ key_file_path }} ubuntu@{{ instance_public_ip }}

          # Security Group
          Web Security Group: {{ web_sg.group_id }}
        dest: "~/ansible-project/infrastructure-details.txt"
        mode: '0644'
      when: instance_public_ip is defined

    - name: Display deployment status
      debug:
        msg: |
          {% if existing_instance.instances | length > 0 %}
          ✅ Using existing instance: {{ instance_public_ip }}
          {% else %}
          🎉 New instance created: {{ instance_public_ip }}
          {% endif %}
          🔑 SSH: ssh -i {{ key_file_path }} ubuntu@{{ instance_public_ip }}
      when: instance_public_ip is defined

  handlers:
    - name: Display key info
      debug:
        msg: |
          New key pair created!
          Key Name: {{ key_name }}
          Key saved to: {{ key_file_path }}
          Keep this key safe!
